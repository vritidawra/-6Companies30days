class Solution {
public:
    vector<bool>vis;
    bool helper(vector<int>& nums,int i,int n,int k,int currsum,int target){
        if(k==1) return 1;
        if(i==n) return 0;
        if(currsum==target) return helper(nums,0,n,k-1,0,target);
        for(int j=i;j<n;j++){
            if(vis[j] == 0 && currsum+nums[j]<=target){
                vis[j]=1;
                currsum+=nums[j];
                if(helper(nums,j+1,n,k,currsum,target)){
                    return 1;
                }
                currsum-=nums[j];
                vis[j]=0;
            }
        }
        return 0;
    }
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int sum=0,n=nums.size();
        vis.assign(n, false);
        for(int i=0;i<n;i++){
            sum+=nums[i];
        }
        if(k==1) return 1;
        if(sum%k!=0) return 0;
        return helper(nums,0,n,k,0,sum/k);
    }
};
