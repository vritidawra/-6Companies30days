class Solution {
public:
    bool canconsider(vector<int>& x,vector<int>& needs){
        for (int i=0;i<needs.size();i++){
            if (needs[i]<x[i])
                return false;
        }
        return true;
    }
    int shoppingOffersutil(vector<int>& price, vector<vector<int>>& special, vector<int>& needs,map<vector<int>,int>& dp){
        if (dp.find(needs)!=dp.end())
            return dp[needs];
        int restsum=0;
            for (int j=0;j<needs.size();j++)
                restsum+= needs[j]*price[j];
        int ans=restsum;
        for (int i=0;i<special.size();i++){
            if (canconsider(special[i],needs) && ans>=special[i][needs.size()]){
                auto tempneed= needs;
                for (int j=0;j<needs.size();j++){
                    tempneed[j] -=special[i][j];
                }
                ans = min(ans ,special[i][needs.size()] + shoppingOffersutil(price,special,tempneed,dp));
            }
        }
        
        
        return dp[needs] = ans;
    }
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        map<vector<int>,int> dp;
        return shoppingOffersutil(price,special,needs,dp);
    }
};
