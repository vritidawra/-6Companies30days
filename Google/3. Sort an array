class Solution {
public:
    void merge(vector<int>&nums,int low,int mid,int high){
        if (low >= high) return;
	    int l = low, r = mid + 1, k = 0, size = high - low + 1;
	    vector<int> sorted(size, 0);
        while (l <= mid and r <= high)
            sorted[k++] = nums[l] < nums[r] ? nums[l++] : nums[r++];
        while (l <= mid) 
            sorted[k++] = nums[l++];
        while (r <= high) 
            sorted[k++] = nums[r++];
        for (k = 0; k < size; k++)
            nums[k + low] = sorted[k];
        return;
        
    }
    void mergesort(vector<int>&nums,int l,int h){
        if(l>=h) return;
        int mid=(h-l)/2+l;
        mergesort(nums,l,mid);
        mergesort(nums,mid+1,h);
        merge(nums,l,mid,h);
        return ;
    }
    vector<int> sortArray(vector<int>& nums) {
        mergesort(nums,0,nums.size()-1);
        return nums;
    }
};
