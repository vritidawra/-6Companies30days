class Solution {
public:
    int dx[4]={0,0,-1,1};
    int dy[4]={1,-1,0,0};
    
        bool isvalid(int i,int j,int r,int c,vector<vector<int>>& grid){
            if(i>=0 && i<r && j>=0 && j<c && grid[i][j]==0){
                return true;
            }
            else{
                return false;
            }
        }

        
        void dfs(int i,int j,int r,int c,vector<vector<int>>& grid){
         grid[i][j]=1;
         for(int x=0;x<4;++x){
             int newx=i+dx[x];
             int newy=j+dy[x];
             if(isvalid(newx,newy,r,c,grid)){
                 dfs(newx,newy,r,c,grid);
             }
         }
        }
    int closedIsland(vector<vector<int>>& grid) {
        int r=grid.size();
        int c=grid[0].size();
        
        for(int i=0;i<r;++i){
            for(int j=0;j<c;++j){
                if(i*j==0 || i==r-1 || j==c-1){
                    if(grid[i][j]==0){
                        dfs(i,j,r,c,grid);
                    }
                   
                }
            }
        } int ans=0;
        
        for(int i=0;i<r;++i){
            for(int j=0;j<c;++j){
                if(grid[i][j]==0){
                    ans++;
                    dfs(i,j,r,c,grid);
                }
            }
        }
        return ans;
    }
};
