class Solution {
public:
    //backtracking
    int ans=INT_MIN;
    void solve(int idx,vector<vector<int>>& students, vector<vector<int>>& mentors,int &n,vector<bool>&vis,int currscore){
        if(idx>=n){
            ans=max(ans,currscore);
            return;
        }
        for(int i=0;i<n;i++){
            if(vis[i]==1) continue;
            else{
                vis[i]=1;
                int temp=match(students[idx],mentors[i]);
                solve(idx+1,students,mentors,n,vis,currscore+temp);
                vis[i]=0;
            }
        }
        return;

    }
    int match(vector<int>&s,vector<int>&m){
        int score=0;
        for(int i=0;i<s.size();i++){
            if(s[i]==m[i]){
                score++;
            }
        }
        return score;
    }
    int maxCompatibilitySum(vector<vector<int>>& students, vector<vector<int>>& mentors) {
        int currscore=0;
        int n=students.size();
        vector<bool>vis(n,0);
        solve(0,students,mentors,n,vis,currscore);
        return ans;
    }
};
