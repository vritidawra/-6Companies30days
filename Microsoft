Q1 https://leetcode.com/problems/evaluate-reverse-polish-notation/
Evaluate Reverse Polish Notation
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
Evaluate the expression. Return an integer that represents the value of the expression.
Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Solution:
class Solution {
public:
    int eval(int a, int b,string y){
        if(y=="+") return b+a;
        if(y=="-") return b-a;
        if(y=="*") return long(a)*b;
        return b/a;
    }
    int evalRPN(vector<string>& tokens) {
        stack<int>s;
        for(auto &a:tokens){
            if(a=="+"||a=="-"||a=="*"||a=="/"){
                int x=s.top();
                s.pop();
                int y=s.top();
                s.pop();
                s.push(eval(x,y,a));
            }
            else{
                s.push(stoi(a));
            }
        }
        return s.top();
    }
};




Q2  Combination Sum III (https://leetcode.com/problems/combination-sum-iii/description/)
Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

    Only numbers 1 through 9 are used.
    Each number is used at most once.

Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

Â 

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.

Solution
class Solution {
public:
    void solve(int ind,int sum,int k,int n,vector<vector<int>>&ans,vector<int>&v){
        if(sum==n && k==0){
            ans.push_back(v);
            return;
        }
        if(sum>n) return;
        for(int i=ind;i<=9;i++){
            if(i>n) break;
            v.push_back(i);
            solve(i+1,sum+i,k-1,n,ans,v);
            v.pop_back();
        }
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int>v;
        vector<vector<int>>ans;
        solve(1,0,k,n,ans,v);
        return ans;        
    }
};
//baacktracking
//T->O(2^N ) && S->O(N) [Recusion stack space] && S->O(k * x) [memory for ans]





